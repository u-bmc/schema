// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: management/v1alpha1/management.proto

package managementv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/u-bmc/schema/gen/go/management/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "management.v1alpha1.ManagementService"
)

// ManagementServiceClient is a client for the management.v1alpha1.ManagementService service.
type ManagementServiceClient interface {
	GetVersion(context.Context, *connect_go.Request[v1alpha1.GetVersionRequest]) (*connect_go.Response[v1alpha1.GetVersionResponse], error)
	TriggerButton(context.Context, *connect_go.Request[v1alpha1.TriggerButtonRequest]) (*connect_go.Response[v1alpha1.TriggerButtonResponse], error)
	StreamConsole(context.Context) *connect_go.BidiStreamForClient[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]
	GetFans(context.Context, *connect_go.Request[v1alpha1.GetFansRequest]) (*connect_go.Response[v1alpha1.GetFansResponse], error)
	SetFans(context.Context, *connect_go.Request[v1alpha1.SetFansRequest]) (*connect_go.Response[v1alpha1.SetFansResponse], error)
}

// NewManagementServiceClient constructs a client for the management.v1alpha1.ManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementServiceClient{
		getVersion: connect_go.NewClient[v1alpha1.GetVersionRequest, v1alpha1.GetVersionResponse](
			httpClient,
			baseURL+"/management.v1alpha1.ManagementService/GetVersion",
			opts...,
		),
		triggerButton: connect_go.NewClient[v1alpha1.TriggerButtonRequest, v1alpha1.TriggerButtonResponse](
			httpClient,
			baseURL+"/management.v1alpha1.ManagementService/TriggerButton",
			opts...,
		),
		streamConsole: connect_go.NewClient[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse](
			httpClient,
			baseURL+"/management.v1alpha1.ManagementService/StreamConsole",
			opts...,
		),
		getFans: connect_go.NewClient[v1alpha1.GetFansRequest, v1alpha1.GetFansResponse](
			httpClient,
			baseURL+"/management.v1alpha1.ManagementService/GetFans",
			opts...,
		),
		setFans: connect_go.NewClient[v1alpha1.SetFansRequest, v1alpha1.SetFansResponse](
			httpClient,
			baseURL+"/management.v1alpha1.ManagementService/SetFans",
			opts...,
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	getVersion    *connect_go.Client[v1alpha1.GetVersionRequest, v1alpha1.GetVersionResponse]
	triggerButton *connect_go.Client[v1alpha1.TriggerButtonRequest, v1alpha1.TriggerButtonResponse]
	streamConsole *connect_go.Client[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]
	getFans       *connect_go.Client[v1alpha1.GetFansRequest, v1alpha1.GetFansResponse]
	setFans       *connect_go.Client[v1alpha1.SetFansRequest, v1alpha1.SetFansResponse]
}

// GetVersion calls management.v1alpha1.ManagementService.GetVersion.
func (c *managementServiceClient) GetVersion(ctx context.Context, req *connect_go.Request[v1alpha1.GetVersionRequest]) (*connect_go.Response[v1alpha1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// TriggerButton calls management.v1alpha1.ManagementService.TriggerButton.
func (c *managementServiceClient) TriggerButton(ctx context.Context, req *connect_go.Request[v1alpha1.TriggerButtonRequest]) (*connect_go.Response[v1alpha1.TriggerButtonResponse], error) {
	return c.triggerButton.CallUnary(ctx, req)
}

// StreamConsole calls management.v1alpha1.ManagementService.StreamConsole.
func (c *managementServiceClient) StreamConsole(ctx context.Context) *connect_go.BidiStreamForClient[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse] {
	return c.streamConsole.CallBidiStream(ctx)
}

// GetFans calls management.v1alpha1.ManagementService.GetFans.
func (c *managementServiceClient) GetFans(ctx context.Context, req *connect_go.Request[v1alpha1.GetFansRequest]) (*connect_go.Response[v1alpha1.GetFansResponse], error) {
	return c.getFans.CallUnary(ctx, req)
}

// SetFans calls management.v1alpha1.ManagementService.SetFans.
func (c *managementServiceClient) SetFans(ctx context.Context, req *connect_go.Request[v1alpha1.SetFansRequest]) (*connect_go.Response[v1alpha1.SetFansResponse], error) {
	return c.setFans.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the management.v1alpha1.ManagementService
// service.
type ManagementServiceHandler interface {
	GetVersion(context.Context, *connect_go.Request[v1alpha1.GetVersionRequest]) (*connect_go.Response[v1alpha1.GetVersionResponse], error)
	TriggerButton(context.Context, *connect_go.Request[v1alpha1.TriggerButtonRequest]) (*connect_go.Response[v1alpha1.TriggerButtonResponse], error)
	StreamConsole(context.Context, *connect_go.BidiStream[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]) error
	GetFans(context.Context, *connect_go.Request[v1alpha1.GetFansRequest]) (*connect_go.Response[v1alpha1.GetFansResponse], error)
	SetFans(context.Context, *connect_go.Request[v1alpha1.SetFansRequest]) (*connect_go.Response[v1alpha1.SetFansResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/management.v1alpha1.ManagementService/GetVersion", connect_go.NewUnaryHandler(
		"/management.v1alpha1.ManagementService/GetVersion",
		svc.GetVersion,
		opts...,
	))
	mux.Handle("/management.v1alpha1.ManagementService/TriggerButton", connect_go.NewUnaryHandler(
		"/management.v1alpha1.ManagementService/TriggerButton",
		svc.TriggerButton,
		opts...,
	))
	mux.Handle("/management.v1alpha1.ManagementService/StreamConsole", connect_go.NewBidiStreamHandler(
		"/management.v1alpha1.ManagementService/StreamConsole",
		svc.StreamConsole,
		opts...,
	))
	mux.Handle("/management.v1alpha1.ManagementService/GetFans", connect_go.NewUnaryHandler(
		"/management.v1alpha1.ManagementService/GetFans",
		svc.GetFans,
		opts...,
	))
	mux.Handle("/management.v1alpha1.ManagementService/SetFans", connect_go.NewUnaryHandler(
		"/management.v1alpha1.ManagementService/SetFans",
		svc.SetFans,
		opts...,
	))
	return "/management.v1alpha1.ManagementService/", mux
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) GetVersion(context.Context, *connect_go.Request[v1alpha1.GetVersionRequest]) (*connect_go.Response[v1alpha1.GetVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("management.v1alpha1.ManagementService.GetVersion is not implemented"))
}

func (UnimplementedManagementServiceHandler) TriggerButton(context.Context, *connect_go.Request[v1alpha1.TriggerButtonRequest]) (*connect_go.Response[v1alpha1.TriggerButtonResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("management.v1alpha1.ManagementService.TriggerButton is not implemented"))
}

func (UnimplementedManagementServiceHandler) StreamConsole(context.Context, *connect_go.BidiStream[v1alpha1.StreamConsoleRequest, v1alpha1.StreamConsoleResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("management.v1alpha1.ManagementService.StreamConsole is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetFans(context.Context, *connect_go.Request[v1alpha1.GetFansRequest]) (*connect_go.Response[v1alpha1.GetFansResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("management.v1alpha1.ManagementService.GetFans is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetFans(context.Context, *connect_go.Request[v1alpha1.SetFansRequest]) (*connect_go.Response[v1alpha1.SetFansResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("management.v1alpha1.ManagementService.SetFans is not implemented"))
}
